# Class to accommodates Tree Traversal types(Inorder, Preorder, Postorder)

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

    def inOrder(self, root):
        if root:
            self.inOrder(root.left)
            print(root.val, end=" ")
            self.inOrder(root.right)

    def preOrder(self, root):
        if root:
            print(root.val, end=" ")
            self.preOrder(root.left)
            self.preOrder(root.right)

    def postOrder(self, root):
        if root:
            self.postOrder(root.left)
            self.postOrder(root.right)
            print(root.val, end=" ")

root = Node(2)
root.left = Node(4)  # type: ignore
root.right = Node(5)  # type: ignore
root.left.left = Node(7)  # type: ignore
root.left.right = Node(8)  # type: ignore

print("InOrder Traversal :", end=" ")
root.inOrder(root)
print("")

print("PreOrder Traversal :", end=" ")
root.preOrder(root)
print("")

print("PostOrder Traversal :", end=" ")
root.postOrder(root)
print("")
